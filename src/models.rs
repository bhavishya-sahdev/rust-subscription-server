// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use crate::{
    routes::subs,
    schema::{alembic_version, subscriptions, users},
};
use chrono::NaiveDateTime;
use derive_more::{Display, Error};
use diesel::prelude::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(version_num))]
#[diesel(table_name=alembic_version)]
pub struct AlembicVersion {
    pub version_num: String,
}

#[derive(
    Queryable,
    Debug,
    Serialize,
    Deserialize,
    Insertable,
    Associations,
    Selectable,
    Identifiable,
    PartialEq,
)]
#[diesel(table_name = subscriptions)]
#[diesel(belongs_to(User, foreign_key = user_id))]
pub struct Subscription {
    pub id: Uuid,
    pub user_id: Uuid,
    pub name: String,
    pub updated_at: NaiveDateTime,
    pub created_at: NaiveDateTime,
}

#[derive(AsChangeset, Serialize, Deserialize)]
#[diesel(table_name = subscriptions)]
pub struct SubscriptionUpdateParams {
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Insertable)]
#[diesel(table_name = subscriptions)]
pub struct CreateSubscriptionBody {
    pub name: String,
}

#[derive(Serialize, Deserialize, Insertable)]
#[diesel(table_name = subscriptions)]
pub struct CreateSubscriptionModel {
    pub name: String,
    pub user_id: Uuid,
}

#[derive(Queryable, Serialize, Deserialize)]
pub struct SubscriptionJoinedUser {
    pub id: Uuid,
    pub name: String,
    pub updated_at: NaiveDateTime,
    pub created_at: NaiveDateTime,
    pub email: Option<String>,
}

#[derive(
    Queryable, Debug, Serialize, Deserialize, Insertable, Selectable, Identifiable, PartialEq,
)]
#[diesel(table_name = users)]
pub struct User {
    pub id: Uuid,
    pub email: Option<String>,
    pub hashed_password: Option<String>,
    pub updated_at: Option<NaiveDateTime>,
    pub created_at: Option<NaiveDateTime>,
}

#[derive(Debug, Display, Deserialize, Serialize, Clone)]
pub struct AuthErrorResponse {
    pub detail: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UserResponse {
    pub id: Uuid,
    pub email: Option<String>,
    pub updated_at: Option<NaiveDateTime>,
    pub created_at: Option<NaiveDateTime>,
}

#[derive(Debug, Display, Error, Serialize)]
#[display(fmt = "Error:\nStatus: {}\nMessage: {}", status, message)]
pub struct ErrorResponse {
    pub status: String,
    pub message: String,
}
